import pygame # Main import to make a game
import random # To choose random coordinates for ou enemies
import sys # To exit the game when necessary
import math # To calculate distance for collision
from pygame import mixer # To play sounds when necessary

# Our main method where the coding for the game will be done
def game():

    # Declaring every variable gloabal 
    global icon , playerImg , playerX , playerY , playerX_change , screen ,  enemyImg , enemyX , enemyY , enemyX_change , enemyY_change , no_of_enemies , bulletImg , bulletX , bulletY , bulletX_change , bulletY_change , bullet_state , background , score_value , font , textY , textX , over_font , game_over_screen

    # This function will show score
    def show_score(x , y):
        score = font.render('Score : ' +str(score_value) , True , (255 , 255 , 255))
        screen.blit(score , (x , y))

    # This function will show our player
    def player(x,y):
        screen.blit(playerImg , (x , y))

    # This function will show enemies (6)
    def enemy(x, y , i):
        screen.blit(enemyImg[i] , (x , y))

    # This function will show bullet
    def bullet(x , y):
        global bullet_state
        bullet_state = 'fire'
        screen.blit(bulletImg , (x + 16 , y + 10))

    # This function will calculate distance between bullet and enemy to use for collision
    def isCollision(enemyX , enemyY , bulletX , bulletY):
        distance = math.sqrt(math.pow((enemyX - bulletX) , 2) + math.pow((enemyY - bulletY) , 2))
        if distance < 27:
            return True
        else:
            return False  
    
    # Game loop 
    while True:
        screen.fill((0 , 0 , 0))
        screen.blit(background , (0 , 0))

        for event in pygame.event.get():
            if event.type == pygame.QUIT: # This will exit when cross is clicked
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RIGHT: # This will move our player to right when right key is pressed
                    playerX_change = 0.5
                elif event.key == pygame.K_LEFT: # This will move our player to left when left key is pressed
                    playerX_change = -0.5
                elif event.key == pygame.K_SPACE: # This will shoot bullets when space is pressed
                    if bullet_state == 'ready':
                        bullet_sound = mixer.Sound('laser.wav')
                        bullet_sound.play()
                        bulletX = playerX
                        bullet(bulletX , bulletY)
                elif event.key == pygame.K_ESCAPE: # This will also exit the code when esc is pressed
                    pygame.quit()
                    sys.exit()
        
        # This will change our player's position
        playerX += playerX_change

        # This will set boundaries for our player
        if playerX <= 0:    
            playerX = 0
        elif playerX >= 736:
            playerX = 736

        # For loop to code our list of enemies
        for i in range(no_of_enemies):
                
            # This will change our 6 enemies' location
            enemyX[i] += enemyX_change[i]

            # To change the position of score and play game over sound when one of the six enemies reaches 440px at y coordinate
            if enemyY[i] > 440:
                sound = mixer.Sound('game-over-sound.mp3')
                sound.play()
                textX = 250
                textY = 300
                playerY = 2000
                for j in range(6):
                    enemyY[j] = -1000
                    enemyY_change.append(0)
                
            # This will set boundaries for our six enemies
            if enemyX[i] <= 0:
                    enemyX_change[i] = 0.5
                    enemyY[i] += enemyY_change[i]
            elif enemyX[i] >= 730:
                    enemyX_change[i] = -0.5
                    enemyY[i] += enemyY_change[i]

            # Checking collison between bullet and enemy
            collision = isCollision(enemyX[i] , enemyY[i] , bulletX , bulletY)
            if collision:
                    collision_sound = mixer.Sound('explosion.wav')
                    collision_sound.play()
                    bulletY = 480
                    bullet_state = 'ready'
                    score_value += 1
                    enemyX[i] = random.randint(0 , 735)
                    enemyY[i] = random.randint(50 , 150)
                
            # We have called our enemy function here because now enemies will respawn after collision with bullet
            enemy(enemyX[i] , enemyY[i] , i)            

        # This is basically used to shoot multiple bullets one by one
        if bulletY <= 0:
                bulletY = 480
                bullet_state = 'ready'
                        
        # This is done so that the bullet will not follow the player
        if bullet_state == 'fire':
                bullet(bulletX , bulletY)
                bulletY -= bulletY_change

        # Calling our player function
        player(playerX,playerY)

        # Calling our Score function
        show_score(textX , textY)

        # This is very important as it updates our screen and creates the illusion of movement
        pygame.display.update()

if __name__ == '__main__':

    # Initializing all modules available in pygame
    pygame.init()

    # Creating a window
    screen = pygame.display.set_mode((800,600))

    # Setting Title, icon and display
    pygame.display.set_caption("Space Invaders")
    icon = pygame.image.load('ufo.png').convert_alpha()
    pygame.display.set_icon(icon)

    # Creating Player
    playerImg = pygame.image.load('arcade-game.png').convert_alpha()
    playerX = 370
    playerY = 480
    playerX_change = 0

    # Creating Enemy
    enemyImg = []      # We have made our enemies' variables a list  
    enemyX = []        # so that we can display six enemies instead 
    enemyY = []        # of one
    enemyX_change = []
    enemyY_change = []
    no_of_enemies = 6

    for i in range(no_of_enemies): # This loop will create six enemies
        enemyImg.append(pygame.image.load('alien.png').convert_alpha()) 
        enemyX.append(random.randint(0 , 735)) 
        enemyY.append(random.randint(50 , 100)) 
        enemyX_change.append (0.5) 
        enemyY_change.append(40)

    # Creating Bullet
    bulletImg = pygame.image.load('bullet.png').convert_alpha()
    bulletX = 0
    bulletY = 480
    bulletX_change = 0
    bulletY_change = 0.5
    bullet_state = 'ready'

    # Adding a background image of size 800 x 600 px
    background = pygame.image.load('background.png').convert_alpha()

    # Score
    score_value = 0
    font = pygame.font.Font('freesansbold.ttf' , 64)
    textX = 10
    textY = 10

    # We have called our game function in a infinite loop because we want our game to run continusly until the player hits the cross
    while True:
        game() # Calling our game function
